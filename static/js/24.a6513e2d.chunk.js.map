{"version":3,"sources":["views/TokenMigration/components/IntroCard.tsx","views/TokenMigration/components/TeamHeader.tsx","views/TokenMigration/components/hooks/useUpgradeSwapApprove.ts","views/TokenMigration/components/SwapCard/SwapCardActions/SwapApprovalAction.tsx","views/TokenMigration/components/SwapCard/NotEnoughTokensModal.tsx","views/TokenMigration/components/hooks/useUpgradeSwap.tsx","views/TokenMigration/components/SwapCard/SwapCardActions/SwapActions.tsx","views/TokenMigration/components/SwapCard/SwapCardActions/index.tsx","views/TokenMigration/components/hooks/useCheckSwapApprovalStatus.ts","views/TokenMigration/components/SwapCard/index.tsx","views/TokenMigration/index.tsx","views/Profile/components/HeaderWrapper.tsx"],"names":["IntroCard","t","useTranslation","mb","isActive","alignItems","justifyContent","flexDirection","scale","id","mt","href","color","TeamHeader","useProfile","isInitialized","profile","showIntroCallout","HeaderWrapper","as","bold","useUpgradeSwapApprove","tokenContract","spenderAddress","useState","requestedApproval","setRequestedApproval","callWithGasPrice","useCallWithGasPrice","useToast","toastSuccess","toastError","onApprove","useCallback","a","ethers","constants","MaxUint256","tx","wait","status","console","error","StyledButton","styled","Button","SwapApprovalAction","isLoading","swapContract","useUpgradeSwapContract","oldMochi","useOldMochi","address","spin","width","endIcon","disabled","onClick","NotEnoughTokensModal","Link","tokenSymbol","onDismiss","theme","useTheme","title","symbol","headerBackground","colors","gradients","cardHeader","external","variant","useUpgradeSwap","onSwap","amount","tokenUpgradeSwap","BrokeMessage","Heading","attrs","mediaQueries","md","RenewWrapper","div","SwapActions","oldMochiTokenAddress","oldMochiTokenBalance","bMochiTokenAddress","bMochiTokenBalance","useModal","onPresentTokenRequired","pendingTx","setPendingTx","onPresentSwap","toString","hasFunds","BigNumber","gt","si","SwapCardActions","Text","isSwapApproved","setIsSwapApproved","account","useWeb3React","oldMochiContract","upgradeSwapContract","useLastUpdated","setLastUpdated","lastUpdated","useEffect","allowance","response","log","currentAllowance","checkApprovalStatus","useCheckSwapApprovalStatus","Info","InfoMiddle","InfoLast","Avatar","img","TitleHead","StyledTeamCard","Card","SwapCard","ml","getFullDisplayBalance","TokenMigration","bMochiBalance","useTokenBalance","tokens","hmochi","oldMochiBalance","oldhmochi","fetchStatus","Page","balance"],"mappings":"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","file":"static/js/24.a6513e2d.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Card, CardBody, Flex, Heading, Text, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n// import {  } from 'react-router-dom'\n\nconst IntroCard = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Card mb=\"32px\" isActive>\n      <CardBody>\n        <Flex\n          alignItems={['start', null, 'center']}\n          justifyContent={['start', null, 'space-between']}\n          flexDirection={['column', null, 'row']}\n        >\n          <div>\n            <Heading scale=\"lg\" mb=\"8px\">\n              {t('Swap your old hMOCHI for new hMOCHI here.')}\n            </Heading>\n            <Text>{t('You can only do this for a limited time!')}</Text>\n          </div>\n          \n            <Button id=\"teamsPageSetUpProfile\" mt={['16px', null, 0]}>\n              <LinkExternal href=\"https://docs.onemoon.io\" color=\"white\"> {t('Learn More')} </LinkExternal>\n            </Button>\n        </Flex>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default IntroCard\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport { useProfile } from 'state/profile/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport HeaderWrapper from 'views/Profile/components/HeaderWrapper'\nimport IntroCard from './IntroCard'\n\nconst TeamHeader = () => {\n  const { t } = useTranslation()\n  const { isInitialized, profile } = useProfile()\n  const showIntroCallout = isInitialized && !profile\n\n  return (\n    <>\n      {showIntroCallout && <IntroCard />}\n      <HeaderWrapper>\n        <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mt=\"25px\">\n          {t('Old hMOCHI -> New hMOCHI Upgrade')}\n        </Heading>\n        <Text bold mt=\"20px\" mb=\"12px\">\n          {t('This will burn your legacy hMOCHI tokens and mint you an equal amount of the new hMOCHI tokens.  Our new hMochi token will allow auto compounding pools and a host of new features.')}\n        </Text>\n      </HeaderWrapper>\n    </>\n  )\n}\n\nexport default TeamHeader\n","\nimport { useCallback, useEffect, useState } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\n\nconst useUpgradeSwapApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n\n  const onApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await callWithGasPrice(tokenContract, 'approve', [spenderAddress, ethers.constants.MaxUint256])\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now swap old hMOCHI for new hMOCHI!'),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setRequestedApproval(false)\n    }\n  }, [\n    spenderAddress,\n    tokenContract,\n    callWithGasPrice,\n    t,\n    toastError,\n    toastSuccess,\n  ])\n  return { onApprove, requestedApproval}\n}\n\nexport default useUpgradeSwapApprove\n\n// export const useApprovePool = (lpContract: Contract, sousId, earningTokenSymbol) => {\n//   const [requestedApproval, setRequestedApproval] = useState(false)\n//   const { toastSuccess, toastError } = useToast()\n//   const { callWithGasPrice } = useCallWithGasPrice()\n//   const { t } = useTranslation()\n//   const dispatch = useAppDispatch()\n//   const { account } = useWeb3React()\n//   const sousChefContract = useSousChef(sousId)\n\n//   const handleApprove = useCallback(async () => {\n//     try {\n//       setRequestedApproval(true)\n//       const tx = await callWithGasPrice(lpContract, 'approve', [sousChefContract.address, ethers.constants.MaxUint256])\n//       const receipt = await tx.wait()\n\n//       dispatch(updateUserAllowance(sousId, account))\n//       if (receipt.status) {\n//         toastSuccess(\n//           t('Contract Enabled'),\n//           t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n//         )\n//         setRequestedApproval(false)\n//       } else {\n//         // user rejected tx or didn't go thru\n//         toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n//         setRequestedApproval(false)\n//       }\n//     } catch (e) {\n//       console.error(e)\n//       toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n//     }\n//   }, [\n//     account,\n//     dispatch,\n//     lpContract,\n//     sousChefContract,\n//     sousId,\n//     earningTokenSymbol,\n//     t,\n//     toastError,\n//     toastSuccess,\n//     callWithGasPrice,\n//   ])\n\n//   return { handleApprove, requestedApproval }\n// }\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useOldMochi, useUpgradeSwapContract } from 'hooks/useContract'\nimport { useTranslation } from 'contexts/Localization'\nimport styled, { DefaultTheme } from 'styled-components'\nimport useUpgradeSwapApprove from '../../hooks/useUpgradeSwapApprove'\n\n\ninterface ApprovalApprovalActionProps {\n  isLoading?: boolean\n}\n\nconst StyledButton = styled(Button)`\n  margin-top: 30px;\n`\n\nconst SwapApprovalAction: React.FC<ApprovalApprovalActionProps> = ({ isLoading }) => {\n  const { t } = useTranslation()\n  const swapContract = useUpgradeSwapContract()\n  const oldMochi = useOldMochi()\n  const {onApprove, requestedApproval} = useUpgradeSwapApprove(oldMochi, swapContract.address)\n  return (\n    <>\n      {isLoading ? (\n        // <Skeleton width=\"100%\" height=\"52px\" />\n        <AutoRenewIcon spin color=\"currentColor\" mt=\"5px\" width=\"100px\" />\n      ) : (\n        <StyledButton\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" width=\"40px\" /> : null}\n          disabled={requestedApproval}\n          onClick={onApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </StyledButton>\n      )}\n    </>\n  )\n}\n\nexport default SwapApprovalAction\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={t('%symbol% required', { symbol: tokenSymbol })}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href=\"/swap\">\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      {/* <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink> */}\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import { useCallback } from 'react'\nimport { tokenUpgradeSwap } from 'utils/calls'\nimport { useUpgradeSwapContract } from 'hooks/useContract'\n\nconst useUpgradeSwap = () => {\n  const swapContract = useUpgradeSwapContract()\n\n  const onSwap = useCallback(\n    async (amount: string) => {\n      await tokenUpgradeSwap(swapContract, amount)\n    },\n    [swapContract],\n  )\n\n  return { onSwap }\n}\n\nexport default useUpgradeSwap\n","import React, { useState } from 'react'\nimport { Flex, Button, useModal, Skeleton, Heading, PrizeIcon, Text, AutoRenewIcon } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\n// import { Pool } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport styled, { DefaultTheme } from 'styled-components'\nimport NotEnoughTokensModal from '../NotEnoughTokensModal'\n\nimport useUpgradeSwap from '../../hooks/useUpgradeSwap'\n// import VaultStakeModal from '../VaultStakeModal'\n// import HasSharesActions from './HasSharesActions'\nimport { SwapActionsProps } from '../types'\n\nconst BrokeMessage = styled(Heading).attrs({ as: 'h3' })`\n  font-size: 24px;\n  padding: 30px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 20px;\n    color: #fe019a;\n  }\n`\n\nconst RenewWrapper = styled.div`\n  margin: auto;\n  padding-top: 30px;\n  height: 100px;\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: 30px;\n`\n\n\n\nconst SwapActions: React.FC<SwapActionsProps> = ({\n  oldMochiTokenAddress,\n  oldMochiTokenBalance,\n  bMochiTokenAddress,\n  bMochiTokenBalance,\n  isLoading\n}) => {\n  // const { stakingToken } = oldMochiTokenAddress\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol=\"MOCHI(old)\" />)\n  const { onSwap } = useUpgradeSwap()\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const onPresentSwap = async () => {\n    setPendingTx(true)\n    try {\n      // make this all of it.\n      await onSwap(oldMochiTokenBalance.toString())\n      toastSuccess(\n        `${t('Swapped')}!`,\n        t('Your old hMOCHI has been upgraded to new hMOCHI!'),\n      )\n    } catch (e) {\n      toastError(\n        t('Error'),\n        t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n      )\n      console.error(e)\n    } finally {\n      setPendingTx(false)\n    }\n  }\n\n  const hasFunds = new BigNumber(oldMochiTokenBalance).gt(0)\n\n  const renderSwapAction = () => {\n    return (\n      <>\n      {hasFunds ? ( \n      \n        <StyledButton \n        onClick={new BigNumber(oldMochiTokenBalance).gt(0) ? onPresentSwap : onPresentTokenRequired}   \n        variant=\"primary\"\n        si=\"100px\" \n        >\n          {t('Swap')}\n        </StyledButton>\n      \n      ) : (\n          <BrokeMessage>\n            All tokens have been swapped!\n          </BrokeMessage>\n      )}\n      </>\n    )\n  }\n\n  return ( \n    // <Flex flexDirection=\"column\">{isLoading || pendingTx ? <Skeleton width=\"100%\" height=\"52px\" /> : renderSwapAction()}</Flex>\n    <Flex flexDirection=\"column\">{isLoading || pendingTx ? <RenewWrapper><AutoRenewIcon width=\"40px\" spin color=\"currentColor\" /></RenewWrapper> : renderSwapAction()}</Flex>\n  )\n}\n\n\nexport default SwapActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport SwapApprovalAction from './SwapApprovalAction'\nimport SwapActions from './SwapActions'\nimport { useCheckSwapApprovalStatus } from '../../hooks/useCheckSwapApprovalStatus'\nimport { SwapCardActionsProps } from '../types'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst SwapCardActions: React.FC<SwapCardActionsProps> = ({ \n  oldMochiTokenAddress,\n  oldMochiTokenBalance,\n  bMochiTokenAddress,\n  bMochiTokenBalance,\n  isLoading,\n}) => {\n  // const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n\n  // lets get the users balance of the burn token - old mochi\n\n  const { isSwapApproved, setLastUpdated } = useCheckSwapApprovalStatus()\n  \n  console.log('isSwapApproved',isSwapApproved)\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {/* <Box display=\"inline\">\n          <InlineText\n            color={accountHasSwappableTokens ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box> */}\n        {isSwapApproved ? (\n          <SwapActions\n            oldMochiTokenAddress={oldMochiTokenAddress}\n            oldMochiTokenBalance={oldMochiTokenBalance}\n            bMochiTokenAddress={bMochiTokenAddress}\n            bMochiTokenBalance={bMochiTokenBalance}\n            isLoading={!isSwapApproved}\n          />\n        ) : (\n          <SwapApprovalAction \n            isLoading={isLoading} \n          />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default SwapCardActions\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'ethers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useOldMochi, useUpgradeSwapContract } from 'hooks/useContract'\nimport useLastUpdated from 'hooks/useLastUpdated'\n\n\nexport const useCheckSwapApprovalStatus = () => {\n  const [isSwapApproved, setIsSwapApproved] = useState(false)\n  const { account } = useWeb3React()\n\n  // Swap Contract needs to have allowanace of oldMOCHI\n  const oldMochiContract = useOldMochi()\n  const upgradeSwapContract = useUpgradeSwapContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await oldMochiContract.allowance(account, upgradeSwapContract.address)\n        console.log('checkApprovalStatus response', response)\n        const currentAllowance = new BigNumber(response.toString())\n        setIsSwapApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsSwapApproved(false)\n        console.log('checkApprovalStatus error', error)\n      }\n    }\n\n    checkApprovalStatus()\n  }) // [account, oldMochiContract, upgradeSwapContract, lastUpdated, isSwapApproved] | cakeVaultContract, lastUpdated\n\n  return { isSwapApproved, setLastUpdated }\n}\n","import React, { useState } from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Button, Card, CommunityIcon, Flex, Heading, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { EnableStatus, SwapCardProps } from './types'\nimport useUpgradeSwapApprove from '../hooks/useUpgradeSwapApprove'\nimport SwapCardActions from './SwapCardActions'\n\nconst Body = styled.div`\n  align-items: start;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n    font-size: 40px;\n  }\n`\n\nconst Info = styled.div`\n  flex: 1;\n  padding: 0px;\n  padding-top: 15px;\n  padding-left: 15px;\n  width: 100px;\n`\n\nconst InfoButton = styled.div`\n  flex: 1;\n  padding: 30px;\n  margin-left: auto;\n  \n`\n\nconst InfoMiddle = styled.div`\n  flex: 1;\n  margin-left: auto;\n  width: 100px;\n`\n\nconst InfoLast = styled.div`\n  flex: 1;\n  padding: 15px;\n  padding-left: 25px;\n`\n\nconst Avatar = styled.img`\n  border-radius: 50%;\n`\n\nconst TitleHead = styled(Heading).attrs({ as: 'span' })`\n  font-size: 16px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 16px;\n  }\n`\n\nconst MobileAvatar = styled.div`\n  flex: none;\n  margin-right: 8px;\n\n  ${Avatar} {\n    height: 64px;\n    width: 64px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst StyledTeamCard = styled(Card)`\n  margin-bottom: 16px;\n`\n\nconst SwapCard: React.FC<SwapCardProps> = ({\n  oldMochiTokenAddress,\n  oldMochiTokenBalance,\n  bMochiTokenAddress,\n  bMochiTokenBalance,\n  isLoading,\n}) => {\n  const { t } = useTranslation()\n  return (\n    <StyledTeamCard>\n      <Flex>\n        \n        <Info>\n          <Flex alignItems=\"start\" mb=\"16px\" ml=\"52px\">\n            <Heading scale=\"md\" color=\"textSubtle\">\n              <TitleHead>Old hMOCHI Balance</TitleHead>\n            </Heading> \n          </Flex>\n          \n          <Flex alignItems=\"end\" mb=\"16px\" ml=\"52px\">\n            <Heading scale=\"md\" color=\"textSubtle\">\n              {getFullDisplayBalance(oldMochiTokenBalance, 18, 6)}\n            </Heading> \n          </Flex>\n          \n        </Info>\n        \n        <InfoMiddle>\n          \n          <SwapCardActions \n            oldMochiTokenAddress={oldMochiTokenAddress}\n            oldMochiTokenBalance={oldMochiTokenBalance}\n            bMochiTokenAddress={bMochiTokenAddress}\n            bMochiTokenBalance={bMochiTokenBalance}\n            isLoading={isLoading}\n          />\n          \n        </InfoMiddle>\n\n        <InfoLast>\n          \n          <Flex alignItems=\"center\" mb=\"16px\" ml=\"52px\">\n            <Heading scale=\"md\" color=\"textSubtle\">\n              <TitleHead>New hMOCHI Balance</TitleHead>\n            </Heading> \n          </Flex>\n          \n          <Flex alignItems=\"end\" mb=\"16px\" ml=\"52px\">\n            <Heading scale=\"md\" color=\"textSubtle\">\n              {getFullDisplayBalance(bMochiTokenBalance, 18, 6)}\n            </Heading> \n          </Flex>\n        \n        </InfoLast>\n        \n      </Flex>\n      \n    </StyledTeamCard>\n  )\n}\n\nexport default SwapCard\n","import React from 'react'\nimport { AutoRenewIcon, Flex, Heading } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport { useTeams } from 'state/teams/hooks'\nimport Page from 'components/Layout/Page'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport tokens from 'config/constants/tokens'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { useOldMochi, useUpgradeSwapContract } from 'hooks/useContract'\nimport TeamHeader from './components/TeamHeader'\nimport SwapCard from './components/SwapCard'\n\n\nconst TokenMigration: React.FC = () => {\n  const bMochiBalance = useTokenBalance(tokens.hmochi.address[1666600000])\n  const oldMochiBalance = useTokenBalance(tokens.oldhmochi.address[1666600000])\n  \n  // console.log('TokenMigration.bMochiBalance',bMochiBalance)\n  // console.log('TokenMigration.oldMochiBalance',oldMochiBalance)\n  const isSuccess = bMochiBalance.fetchStatus === 'success' && oldMochiBalance.fetchStatus === 'success' \n  const isLoading = !isSuccess\n\n  // console.log('TokenMigration.isLoading', isLoading)\n  // debugger; // eslint-disable-line no-debugger\n  //\n  // Define isLoading here at top;e level\n  // YEEESSS\n  return (\n    <Page>\n       <TeamHeader />\n       <SwapCard \n        oldMochiTokenAddress={tokens.oldhmochi.address[1666600000]}\n        oldMochiTokenBalance={oldMochiBalance.balance} // getFullDisplayBalance(oldMochiBalance.balance, 18, 6)} \n        bMochiTokenAddress={tokens.hmochi.address[1666600000]}\n        bMochiTokenBalance={bMochiBalance.balance} // getFullDisplayBalance(bMochiBalance.balance, 18, 6)}\n        isLoading={isLoading}\n        />\n    </Page>\n  )\n}\n\nexport default TokenMigration\n","import styled from 'styled-components'\n\nconst HeaderWrapper = styled.div`\n  border-bottom: 1px solid rgba(105,250,189,0.3);\n  borcer-opacity: 0.3;\n  margin-bottom: 24px;\n  padding-bottom: 24px;\n`\n\nexport default HeaderWrapper\n"],"sourceRoot":""}